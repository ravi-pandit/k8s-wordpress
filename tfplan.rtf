[0m[1mdata.http.workstation-external-ip: Reading...[0m[0m
[0m[1mdata.http.workstation-external-ip: Read complete after 0s [id=http://ipv4.icanhazip.com][0m
[0m[1maws_ecr_repository.ecr_repo: Refreshing state... [id=wordpress][0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Read complete after 0s [id=ap-south-1][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_iam_policy_document.aws_load_balancer_controller_assume_role_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "aws_load_balancer_controller_assume_role_policy" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:aws-load-balancer-controller",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # data.tls_certificate.eks[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "eks" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # aws_db_instance.main[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "main" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = (known after apply)
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_name                               = "terraform_laravelk8s"
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "mysql"
      [32m+[0m[0m engine_version                        = "8.0"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "terraform-laravelk8s-1"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m max_allocated_storage                 = 100
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = false
      [32m+[0m[0m name                                  = (known after apply)
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = "gp2"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "name" = "RDS_Laravel"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "name" = "RDS_Laravel"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "admin"
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # aws_db_subnet_group.db_subnet_main[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "db_subnet_main" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "subnet-group-terraform"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "name" = "terraform_db_subnet"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "name" = "terraform_db_subnet"
        }
    }

[1m  # aws_eks_cluster.demo[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "demo" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m certificate_authority = (known after apply)
      [32m+[0m[0m cluster_id            = (known after apply)
      [32m+[0m[0m created_at            = (known after apply)
      [32m+[0m[0m endpoint              = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m identity              = (known after apply)
      [32m+[0m[0m name                  = "eks-demo"
      [32m+[0m[0m platform_version      = (known after apply)
      [32m+[0m[0m role_arn              = (known after apply)
      [32m+[0m[0m status                = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m version               = "1.24"

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = false
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = (known after apply)
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # aws_eks_node_group.demo[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "demo" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "eks-demo"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t2.small",
        ]
      [32m+[0m[0m node_group_name        = "demo"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = "1.24"

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 1
          [32m+[0m[0m min_size     = 1
        }
    }

[1m  # aws_iam_openid_connect_provider.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "eks" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags_all        = (known after apply)
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # aws_iam_policy.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "aws_load_balancer_controller" {
      [32m+[0m[0m arn       = (known after apply)
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m name      = "AWSLoadBalancerController"
      [32m+[0m[0m path      = "/"
      [32m+[0m[0m policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "iam:CreateServiceLinkedRole",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "iam:AWSServiceName" = "elasticloadbalancing.amazonaws.com"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeAccountAttributes",
                          [32m+[0m[0m "ec2:DescribeAddresses",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:DescribeInternetGateways",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:DescribeVpcPeeringConnections",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:GetCoipPoolUsage",
                          [32m+[0m[0m "ec2:DescribeCoipPools",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancers",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListeners",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:DescribeSSLPolicies",
                          [32m+[0m[0m "elasticloadbalancing:DescribeRules",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroups",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetHealth",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cognito-idp:DescribeUserPoolClient",
                          [32m+[0m[0m "acm:ListCertificates",
                          [32m+[0m[0m "acm:DescribeCertificate",
                          [32m+[0m[0m "iam:ListServerCertificates",
                          [32m+[0m[0m "iam:GetServerCertificate",
                          [32m+[0m[0m "waf-regional:GetWebACL",
                          [32m+[0m[0m "waf-regional:GetWebACLForResource",
                          [32m+[0m[0m "waf-regional:AssociateWebACL",
                          [32m+[0m[0m "waf-regional:DisassociateWebACL",
                          [32m+[0m[0m "wafv2:GetWebACL",
                          [32m+[0m[0m "wafv2:GetWebACLForResource",
                          [32m+[0m[0m "wafv2:AssociateWebACL",
                          [32m+[0m[0m "wafv2:DisassociateWebACL",
                          [32m+[0m[0m "shield:GetSubscriptionState",
                          [32m+[0m[0m "shield:DescribeProtection",
                          [32m+[0m[0m "shield:CreateProtection",
                          [32m+[0m[0m "shield:DeleteProtection",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "ec2:CreateAction" = "CreateSecurityGroup"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                          [32m+[0m[0m "ec2:DeleteTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:DeleteSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "elasticloadbalancing:DeleteListener",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:DeleteRule",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:SetIpAddressType",
                          [32m+[0m[0m "elasticloadbalancing:SetSecurityGroups",
                          [32m+[0m[0m "elasticloadbalancing:SetSubnets",
                          [32m+[0m[0m "elasticloadbalancing:DeleteLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DeleteTargetGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:RegisterTargets",
                          [32m+[0m[0m "elasticloadbalancing:DeregisterTargets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:SetWebAcl",
                          [32m+[0m[0m "elasticloadbalancing:ModifyListener",
                          [32m+[0m[0m "elasticloadbalancing:AddListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:RemoveListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:ModifyRule",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id = (known after apply)
      [32m+[0m[0m tags_all  = (known after apply)
    }

[1m  # aws_iam_role.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "aws_load_balancer_controller" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aws-load-balancer-controller"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role.demo-cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "demo-cluster" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "terraform-eks-demo-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role.demo-node[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "demo-node" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "terraform-eks-demo-node"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.aws_load_balancer_controller_attach[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "aws_load_balancer_controller_attach" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aws-load-balancer-controller"
    }

[1m  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSClusterPolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "terraform-eks-demo-cluster"
    }

[1m  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSVPCResourceController[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSVPCResourceController" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = "terraform-eks-demo-cluster"
    }

[1m  # aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "demo-node-AmazonEC2ContainerRegistryReadOnly" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "terraform-eks-demo-node"
    }

[1m  # aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKSWorkerNodePolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "terraform-eks-demo-node"
    }

[1m  # aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKS_CNI_Policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "terraform-eks-demo-node"
    }

[1m  # aws_internet_gateway.demo_internet_gateway[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "demo_internet_gateway" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "terraform-eks-demo"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "terraform-eks-demo"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_route_table.demo_route_table[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "demo_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m instance_id                = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table_association.demo[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "demo" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.demo[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "demo" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.demo[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "demo" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_secretsmanager_secret.password[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "password" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m name                           = (known after apply)
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 30
      [32m+[0m[0m rotation_enabled               = (known after apply)
      [32m+[0m[0m rotation_lambda_arn            = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
    }

[1m  # aws_secretsmanager_secret_version.password[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret_version" "password" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m secret_id      = (known after apply)
      [32m+[0m[0m secret_string  = (sensitive value)
      [32m+[0m[0m version_id     = (known after apply)
      [32m+[0m[0m version_stages = (known after apply)
    }

[1m  # aws_security_group.demo-cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "demo-cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Cluster communication with worker nodes"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "terraform-eks-demo-cluster"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "terraform-eks-demo"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "terraform-eks-demo"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.rds-sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds-sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for RDS"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = "MySQL access"
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
            },
        ]
      [32m+[0m[0m name                   = "rds-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group_rule.demo-cluster-ingress-workstation-https[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "demo-cluster-ingress-workstation-https" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "123.201.110.196/32",
        ]
      [32m+[0m[0m description              = "Allow workstation to communicate with the cluster API Server"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_subnet.demo_subnet[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "demo_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-south-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                   = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                   = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.demo_subnet[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "demo_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-south-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                   = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                   = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.demo_subnet[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "demo_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-south-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                   = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                   = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.private_demo_subnet[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_demo_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-south-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.128.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.private_demo_subnet[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_demo_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-south-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.144.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.private_demo_subnet[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_demo_subnet" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-south-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.160.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.demo_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "demo_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_classiclink                   = (known after apply)
      [32m+[0m[0m enable_classiclink_dns_support       = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = (known after apply)
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name"                           = "eks-demo-node"
          [32m+[0m[0m "kubernetes.io/cluster/eks-demo" = "shared"
        }
    }

[1m  # random_password.master[0m will be created
[0m  [32m+[0m[0m resource "random_password" "master" {
      [32m+[0m[0m bcrypt_hash      = (sensitive value)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m length           = 16
      [32m+[0m[0m lower            = true
      [32m+[0m[0m min_lower        = 0
      [32m+[0m[0m min_numeric      = 0
      [32m+[0m[0m min_special      = 0
      [32m+[0m[0m min_upper        = 0
      [32m+[0m[0m number           = true
      [32m+[0m[0m numeric          = true
      [32m+[0m[0m override_special = "_!%^"
      [32m+[0m[0m result           = (sensitive value)
      [32m+[0m[0m special          = true
      [32m+[0m[0m upper            = true
    }

[1m  # random_string.random[0m will be created
[0m  [32m+[0m[0m resource "random_string" "random" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 16
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (known after apply)
      [32m+[0m[0m special     = false
      [32m+[0m[0m upper       = true
    }

[1mPlan:[0m 34 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aws_load_balancer_controller_role_arn = (known after apply)
  [32m+[0m[0m config_map_aws_auth                   = (known after apply)
  [32m+[0m[0m kubeconfig                            = (known after apply)
  [32m+[0m[0m rdshost                               = (known after apply)
  [32m+[0m[0m secret                                = {
      [32m+[0m[0m description                    = [90mnull[0m[0m
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m kms_key_id                     = [90mnull[0m[0m
      [32m+[0m[0m recovery_window_in_days        = 30
      [32m+[0m[0m tags                           = [90mnull[0m[0m
    }
  [32m+[0m[0m secret_version                        = (sensitive value)
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mDeprecated attribute[0m
[33m│[0m [0m
[33m│[0m [0m[0m  on workstation-external-ip.tf line 17, in locals:
[33m│[0m [0m  17:   workstation-external-cidr = "${chomp(data.http.workstation-external-ip[4m.body[0m)}/32"[0m
[33m│[0m [0m
[33m│[0m [0mThe attribute "body" is deprecated. Refer to the provider documentation for details.
[33m│[0m [0m
[33m│[0m [0m(and one more similar warning elsewhere)
[33m╵[0m[0m
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
