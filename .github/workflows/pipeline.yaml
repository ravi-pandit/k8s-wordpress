name: Deploy to EKS
on:
  push:
    # paths:
    # - wordpress-fpm/**
    branches: [ main ]

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION}}.amazonaws.com
  ECR_REPOSITORY: wordpress
  IMAGE_TAG: $(git rev-parse --short "$GITHUB_SHA")
  CHANGE_CAUSE: ${{ github.event.release.tag_name }}
  AWS_DEFAULT_OUTPUT: json
  commitTag: ${{ github.sha }}

jobs:
  AWSCLI:
    name: awscli
    runs-on: ubuntu-latest
    steps:
      # Check out the code
      - uses: actions/checkout@v3

      # Set up the AWS CLI
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl
      - name: Install AWS IAM Authenticator
        run: |
          curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-1.amazonaws.com/1.20.8/2022-12-01/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

      # Login into AWS ECR
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Push docker image
      - name: Build and Push Docker image to ECR
        id: build-push-image
        run: |
          IMAGE_ID=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=$(echo ${{ github.sha }} | cut -c1-7)
          cd wordpress-fpm
          docker build -t $IMAGE_ID:$VERSION .
          docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
          docker push $IMAGE_ID:$VERSION
          echo "::set-output name=version::$VERSION"

      # Set up the kubeconfig file
      - name: Set up kubeconfig
        run: aws eks update-kubeconfig --region ap-south-1 --name eks-demo

      # Get the latest commit id
      - name: Get Latest Commit ID
        run: echo "::set-output name=commit_id::$(${{ github.sha }} | cut -c1-7)"

      # Update the Kubernetes YAML file with the latest commit id
      - name: Update Kubernetes manifest YAML
        run: |
          echo "commitTag=${{ steps.get-commit-id.outputs.commit_id }}" >> $GITHUB_ENV
          sed -i 's/image: 187451058634.dkr.ecr.ap-south-1.amazonaws.com\/wordpress:.*/image: 187451058634.dkr.ecr.ap-south-1.amazonaws.com\/wordpress:'"${commitTag}"'/' manifest/stateful.yml
          git add manifest/stateful.yml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Update container image tag to latest commit id" -a
          echo "::set-output name=commit_hash::$(git rev-parse --short HEAD)"

      # Push the changes to the remote repository (only if changes were not made by this action)
      - name: Push Changes to Remote Repository
        if: ${{ github.actor != 'github-actions[bot]' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      # Apply the updated StatefulSet to the Kubernetes cluster
      - name: Deploy to EKS
        run: |
          # Set the current context to the EKS cluster
          kubectl config get-contexts  
          kubectl apply -f manifest/stateful.yml

      # Notify Slack when build is successful
      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2.0.2
        with:
          status: 'success'
          message: 'Deployment to Kubernetes was successful!'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      # Notify Slack when build fails
      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2.0.2
        with:
          status: 'failure'
          message: 'Deployment to Kubernetes failed. Please check the logs for more information.'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}