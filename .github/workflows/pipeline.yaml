name: Deploy to EKS
on:
  push:
    branches: [ main ]

env:
  ECR_REGISTRY: 187451058634.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: wordpress

jobs:
  AWSCLI:
    name: awscli
    runs-on: ubuntu-latest
    steps:
      # Check out the code
      - uses: actions/checkout@v2

      # Set up the AWS CLI
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

  AWSIAMAuthenticator:
    name: Iam Authenticator
    steps:
      # Install kubectl and the AWS IAM Authenticator
      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl
      - name: Install AWS IAM Authenticator
        run: |
          curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-1.amazonaws.com/1.20.8/2022-12-01/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

  Login into AWS ECR_REGISTRY:
    name: login to ECR
    steps:
      # Login into AWS ECR
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

  Build:
    name: build image
    steps:
      # Build docker image
      - name: Build Docker image
        id: build-image
        run: |
          cd wordpress-fpm
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  Push Image to ECR:
    name: push image
    steps:
      # Push docker image
      - name: Push Docker image to ECR
        id: push-image
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  Set up the kubeconfig file:
  name: setup kubeconfig
  steps:
    # Set up the kubeconfig file
    - name: Set up kubeconfig
      run: aws eks update-kubeconfig --region ap-south-1 --name eks-demo

  # Update Deployment YAML File:

  #     - name: Update Deployment YAML
  #           run: |
  #             sed -i "s|<docker-image>:<old-image-tag>|<docker-image>:<new-image-tag>|g" deployment.yaml

  # Update and Apply Kubernetes Configurations:
  # name: update Configurations
  # steps:
  #   - name: Switch to staging cluster
  #     run: kubectl config get-contexts
  #   - uses: swdotcom/update-and-apply-kubernetes-configs@v1
  #     with:
  #       k8-config-file-paths:  manifest/wordpress-deployment-new.yml
  #       replacement-method: defined
  #     env:
  #       IMAGE_TAG: ${{ github.sha }}
  #       CHANGE_CAUSE: ${{ github.event.release.tag_name }}
    
  Deploy to EKS cluster:
  name: deploy to eks cluster
  steps:
      # Deploy the application to EKS
    - name: Deploy to EKS
      run: |
        IMAGE_REPO=187451058634.dkr.ecr.ap-south-1.amazonaws.com/wordpress
        IMAGE_TAG=${{ github.sha }}
        CLUSTER_NAME=eks-demo
        NAMESPACE=development
        DEPLOYMENT_NAME=wordpress-site
        
        # Set the current context to the EKS cluster
        kubectl config get-contexts  

        # Update Docker image
        kubectl apply -f manifest/wordpress-deployment-new.yml
        
        #image deployment/$DEPLOYMENT_NAME app=$IMAGE_REPO:$IMAGE_TAG --namespace=$NAMESPACE
        